
@{
    ViewData["Title"] = "Account";
}

    <head>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js"></script>
        <script charset="utf-8"
                src="https://cdn.ethers.io/scripts/ethers-v4.min.js"
                type="text/javascript">
        </script>
        <script src="~/js/vibrant.min.js"></script>

        <script type="text/javascript">
            web3Account = "";
            signature = "";
            defaultDeviceId = "";

            window.addEventListener('load', async () => {
                // Modern dapp browsers...
                if (window.ethereum) {
                    window.web3 = new Web3(ethereum);
                    try {
                        // Request account access if needed
                        await ethereum.enable();
                        // Acccounts now exposed
                        await SetWeb3Account();
                    } catch (error) {
                        // User denied account access...
                    }
                }
                // Legacy dapp browsers...
                else if (window.web3) {
                    window.web3 = new Web3(web3.currentProvider);
                    // Acccounts always exposed
                    await SetWeb3Account();
                }
                // Non-dapp browsers...
                else {
                    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
                }
            });

            async function SetWeb3Account() {
                web3Account = web3Account = (await web3.eth.getAccounts())[0];
                app.address = web3Account;
                AttemptReverse(web3Account);
                await GetSignature();
            }

            async function AttemptReverse(address) {
                let provider = new ethers.providers.Web3Provider(web3.currentProvider);
                provider.lookupAddress(address).then(function (ensName) {
                    if (ensName != null) {
                        app.address = ensName;
                    }
                });
            }

            async function GetSignature() {

                let plain = 'TokenCast - proof of ownership. Please sign this message to prove ownership over your Ethereum account.';
                let msg = web3.utils.asciiToHex(plain);
                let hash = web3.utils.keccak256("\x19Ethereum Signed Message:\n" + plain.length + plain);
                signature = await web3.eth.personal.sign(msg, web3Account);
                GetAccountInfo();
            }

            async function GetAccountInfo() {

                // Create account if not exist
                $.get("Account/Details?address=" + web3Account + "&signature=" + signature, function (accountDetails) {
                    if (accountDetails != null) {
                        app.showSignMessage = false;
                    }
                    app.account = accountDetails;
                    app.showAddDeviceButton = true;
                    CheckAddDevice(accountDetails);
                });
            }

            async function CheckAddDevice(accountDetails) {

                // Get device id from QS param
                // If present, prompt user to add device
                var urlParams = new URLSearchParams(window.location.search);
                var deviceId = urlParams.get("deviceId");

                if (deviceId != null &&
                    (accountDetails.devices == null || accountDetails.devices.indexOf(deviceId) == -1)) {
                    AddDevice(deviceId);
                }
                else if (accountDetails.devices != null && accountDetails.devices.length > 0) {
                    defaultDeviceId = accountDetails.devices[0];
                    GetTokens();
                }
            }

            async function AddDevice(deviceId) {
                $.post("Account/AddDevice?address=" + web3Account + "&signature=" + signature + "&deviceId=" + deviceId,
                    function (result) {
                        if (result == false) {
                            console.log("Failed to link device to account");
                        }
                        else {
                            console.log("Successfully linked device to account");
                            defaultDeviceId = deviceId;
                            GetAccountInfo();
                            GetTokens();
                        }
                    });
            }

            async function GetTokens() {

                app.showFetchingTokensMessage = true;

                $.get("Account/Tokens?address=" + web3Account + "&signature=" + signature, function (tokenResponse) {
                    if (tokenResponse == "") {
                        // no tokens found
                        app.showNoTokensMessage = true;
                    }
                    var parsedTokens = JSON.parse(tokenResponse);
                    if (parsedTokens == null || parsedTokens.assets.length == 0) {
                        // no tokens found
                        app.showNoTokensMessage = true;
                    }
                    app.showFetchingTokensMessage = false;
                    app.tokens = [];
                    parsedTokens.assets.forEach(function (token) {
                        if (token.image_url != "") {
                            app.tokens.push(token);
                        }
                    })
                });
            }
        </script>
    </head>
<body>
    <style>
        .center {
            margin: auto;
        }

        .tokenGallery {
            margin-top:9em;
            width: 50%;
            min-width: 251px;
            position: relative;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        div.gallery {
          margin: 5px;
          border: 1px solid #ccc;
          float: left;
        }

        div.gallery:hover {
          border: 1px solid #777;
        }

        div.gallery img {
          width: auto;
          height: 250px;
          padding: 15px;
        }

        div.desc {
          padding: 15px;
          text-align: center;
        }

        .statusMessage {
            padding-top: 25%;
            font-size: x-large;
        }

        #removeContentButtonContainer {
              border-radius: 2px;
              width: 300px;
              position: absolute;
              bottom: -100px;
              right: 25%;
              left: 50%;
              margin-left: -150px;
              padding-bottom: 20px;
        }

        #removeContentButton {
              background-color: darkred;
        }

        .button {
              border: none;
              color: white;
              padding: 15px 32px;
              text-align: center;
              text-decoration: none;
              display: inline-block;
              font-size: 16px;
        }

        #addDeviceButtonContainer {
            position: absolute;
            top: 4em;
            right: 2em;
        }

        #addDeviceButton {
            background-color: darkcyan;
        }

        .modal {
          position: fixed;
          z-index: 1;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, .5);
          display: table;
          transition: opacity .3s ease;
        }

        .inputForm {
            z-index: 2;
            display: grid;
            margin: 0px auto;
            padding: 20px 30px;
            background-color: #fff;
            border-radius: 2px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, .33);
            transition: all .3s ease;
            padding: 3em;
            position: absolute;
            top: 1em;
            left: 50%;
            transform: translate(-50%, 0%);
            width: 100%;
            max-width: 50em;
            max-height: 80%;
            scroll-behavior: unset;
            overflow-y: auto;
        }
        
        #addDeviceFormButton {
            background-color: darkcyan;
            width: 97%;
            max-width: 28em;
            margin-top:1em;
        }

        #idBar {
            border-radius: 0px 0px 30px 30px;
            background-color: lightgray;
            color: black;
            padding: 0.5em; 
            min-width: fit-content; 
            width: 65%; 
            padding-left: 1.5em; 
            padding-right: 1.5em;
            position: absolute;
            left: 50%;
            top: 0px;
            transform: translate(-50%, 0%);
        }
        
        #tokenPreviewContainer {
            background-position: center;
            background-repeat: no-repeat; 
            background-size: contain;
            color:#FFFFFF;
        }
        
        .slider {
            -webkit-appearance: none;
            width: 100%;
            height: 15px;
            border-radius: 5px;  
            background: #d3d3d3;
            outline: none;
            opacity: 0.7;
            -webkit-transition: .2s;
            transition: opacity .2s;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%; 
            background: darkcyan;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }
    </style>
    <div id="app" style="text-align:center;">
        <div id="idBar">
            <img src="~/images/profile.png" style="height: auto; width:1em; position:relative; top:-.2em" /> {{ address }}
        </div>
        <div class="statusMessage" v-if="showSignMessage">Please sign the payload to prove ownership over your account</div>
        <div class="statusMessage" v-if="showFetchingTokensMessage">Fetching tokens...</div>
        <div class="statusMessage" v-if="showNoTokensMessage">Unable to find any tokens :(</div>
        <div class="tokenGallery">
            <div v-for="token in tokens" class="gallery" style="width: 48%; min-width: 250px;">
                <a v-on:click="TokenSelected(token)">
                    <img v-bind:src="token.image_url" v-bind:alt="token.name" width="600" height="400">
                </a>
                <div class="desc">{{ token.name }}</div>
            </div>
        </div>
        <div v-if="tokens != ''" id="removeContentButtonContainer">
            <button class="button" id="removeContentButton" v-on:click="RemoveToken()">Remove Content</button>
        </div>

        <div id="addDeviceButtonContainer" v-if="showAddDeviceButton">
            <button class="button" id="addDeviceButton" v-on:click="showAddDeviceInput = true">Register New Device</button>
        </div>

        <div class="modal" v-if="showModal" v-on:click="CloseInputForms()">
        </div>

        <div class="inputForm" v-if="showAddDeviceInput">
            <h3 style="padding-bottom: 1em;">Register New Device</h3>
            <input id="deviceIdInput" class="center" type="text" placeholder="Device Id (ex: zero_one_two_three)" style="font-size: 1.3em; width: 97%; max-width: 28em; margin-bottom: 1em;" />
            <button class="button center" id="addDeviceFormButton" v-on:click="AddDeviceWithForm()">Add</button>
        </div>


        <div class="inputForm" v-if="showTokenDisplayOptions">
            <h3 style="padding-bottom: 1em;">Cast Token</h3>
            <div class="center" 
                 v-bind:style="{ 
                     backgroundColor: selectedBackgroundColor,
                     width: tokenPreviewWidth + 'px', 
                     height: tokenPreviewHeight + 'px'
                 }">
                <div id="tokenPreviewContainer"
                     class="center"
                     style="width:auto;"
                     v-bind:style="{ 
                        backgroundImage: 'url(' + selectedToken.image_url + ')',
                        backgroundColor: selectedBackgroundColor,
                        height:tokenHeight,
                        marginTop: borderWidthInPx
                     }">
                </div>
            </div>
            <div style="padding-top:1em; text-align:left;">
                <div>Background color</div>
                <div v-for="color in backgroundColorPallete" 
                     class="gallery" 
                     v-on:click="ColorSelected(color)" 
                     v-bind:style="{ backgroundColor: color }"
                     style="width: 2em; height: 2em;">
                </div>
            </div>
            <div style="padding-top:1em; text-align:left;">
                <div>Border width percentage</div>
                <div style="width:100%">
                    <input type="range" min="1" max="25" value="5" class="slider" v-model="borderWidthPercent">
                </div>
            </div>
            <div style="padding-top:1em; text-align:left;">Device</div>
            <select id="deviceSelection" style="margin-top:.5em; margin-bottom:.5em;">
                <option v-for="device in account.devices" :value="device">{{ device }}</option>
            </select>
            <button class="button center" id="displayTokenButton" v-on:click="CastToken()" style="background-color: darkcyan; width: 20em; padding:1em;">Cast</button>
        </div>
    </div>

    <script type="text/javascript">
        web3Account = "";
        signature = "";

        var app = new Vue({
            el: '#app',
            data: {
                address: '',
                account: '',
                tokens: '',
                showSignMessage: true,
                showFetchingTokensMessage: false,
                showNoTokensMessage: false,
                showAddDeviceButton: false,
                showAddDeviceInput: false,
                showTokenDisplayOptions: false,
                selectedToken: null,
                backgroundColorPallete: [],
                selectedBackgroundColor: "#ffffff",
                tokenPreviewHeight: 300,
                tokenPreviewWidth: 500,
                borderWidthPercent: 5,
                borderWidthInPx: ''
            },
            computed: {
                showModal: function () {
                    return this.showTokenDisplayOptions || this.showAddDeviceInput;
                },
                tokenHeight: function () {
                    var borderWidthInPx = app.borderWidthPercent * .01 * app.tokenPreviewHeight;
                    app.borderWidthInPx = borderWidthInPx + "px";
                    var borderHeight = borderWidthInPx * 2;
                    return (app.tokenPreviewHeight - borderHeight) + "px";
                }
            },
            methods: {
                TokenSelected: function (token) {
                    $('html,body').scrollTop(0);
                    app.backgroundColorPallete = [];
                    app.selectedBackgroundColor = "#ffffff";
                    app.selectedToken = token;     
                    // Generate color pallete
                    var vibrantOptions = {
                        colorCount: 7
                    };
                    if (token.background_color != null) {
                        app.backgroundColorPallete.push("#" + token.background_color);
                        app.selectedBackgroundColor = "#" + token.background_color;
                    }
                    if ("#" + token.background_color != "#ffffff") {
                        app.backgroundColorPallete.push("#ffffff");
                    }
                    if ("#" + token.background_color != "#000000") {
                        app.backgroundColorPallete.push("#000000");
                    }
                    var vibrant = new Vibrant(token.image_url, vibrantOptions);
                    vibrant.getPalette((err, palette) => {
                        for (var color in palette){
                            app.backgroundColorPallete.push(palette[color].hex);
                        };
                    });
                    app.showTokenDisplayOptions = true;
                },
                CastToken: function () {
                    app.showTokenDisplayOptions = false;
                    var token = app.selectedToken;
                    var device = document.getElementById("deviceSelection").value;
                    var content =
                    {
                        id: device,
                        currentDisplay: {
                            tokenOwnershipUrl: token.permalink,
                            tokenMetadata: token.description,
                            tokenImageUrl: token.image_url,
                            borderWidthPercent: app.borderWidthPercent,
                            backgroundColor: app.selectedBackgroundColor
                        }
                    }
                    $.post("Account/SetDeviceContent?address=" + web3Account + "&signature=" + signature,
                            content,
                            function (result) {
                                if (result == false) {
                                    alert("Cast Failed");
                                }
                                else {
                                    alert("Casted Token!");
                                }
                            });
                },
                RemoveToken: function () {
                    $.post("Account/RemoveDeviceContent?address=" + web3Account + "&signature=" + signature + "&deviceId=" + defaultDeviceId,
                            function (result) {
                                if (result == false) {
                                    alert("Remove Failed");
                                }
                                else {
                                    alert("Removed Token!");
                                }
                            });
                },
                AddDeviceWithForm: function () {
                    app.showAddDeviceInput = false;
                    var deviceId = document.getElementById("deviceIdInput").value;
                    document.getElementById("deviceIdInput").value = "";
                    AddDevice(deviceId);
                },
                CloseInputForms: function () {
                    app.showTokenDisplayOptions = false;
                    app.showAddDeviceInput = false;
                },
                ColorSelected: function (color) {
                    app.selectedBackgroundColor = color;
                }
            }
        });
    </script>
</body>
